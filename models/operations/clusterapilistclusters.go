// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/internal/utils"
	"openapi/models/components"
)

// State - filter list based on state of cluster.
type State string

const (
	StateAll           State = "ALL"
	StateConnected     State = "CONNECTED"
	StateNotConnected  State = "NOT_CONNECTED"
	StateNotRegistered State = "NOT_REGISTERED"
)

func (e State) ToPointer() *State {
	return &e
}

func (e *State) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALL":
		fallthrough
	case "CONNECTED":
		fallthrough
	case "NOT_CONNECTED":
		fallthrough
	case "NOT_REGISTERED":
		*e = State(v)
		return nil
	default:
		return fmt.Errorf("invalid value for State: %v", v)
	}
}

type ClusterAPIListClustersRequest struct {
	// offset from where to start the list of clusters.
	Offset *int `queryParam:"style=form,explode=true,name=offset"`
	// limit the response to specified count.
	Limit *int `queryParam:"style=form,explode=true,name=limit"`
	// filter list based on state of cluster.
	State *State `default:"ALL" queryParam:"style=form,explode=true,name=state"`
	// get cluster metrics information.
	GetMetrics *bool `queryParam:"style=form,explode=true,name=getMetrics"`
	// text search for cluster.
	Search *string `queryParam:"style=form,explode=true,name=search"`
}

func (c ClusterAPIListClustersRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ClusterAPIListClustersRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ClusterAPIListClustersRequest) GetOffset() *int {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *ClusterAPIListClustersRequest) GetLimit() *int {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ClusterAPIListClustersRequest) GetState() *State {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *ClusterAPIListClustersRequest) GetGetMetrics() *bool {
	if o == nil {
		return nil
	}
	return o.GetMetrics
}

func (o *ClusterAPIListClustersRequest) GetSearch() *string {
	if o == nil {
		return nil
	}
	return o.Search
}

type ClusterAPIListClustersResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// A successful response.
	ConfigClusterStatusList *components.ConfigClusterStatusList
	// An unexpected error response.
	GooglerpcStatus *components.GooglerpcStatus
}

func (o *ClusterAPIListClustersResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ClusterAPIListClustersResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ClusterAPIListClustersResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *ClusterAPIListClustersResponse) GetConfigClusterStatusList() *components.ConfigClusterStatusList {
	if o == nil {
		return nil
	}
	return o.ConfigClusterStatusList
}

func (o *ClusterAPIListClustersResponse) GetGooglerpcStatus() *components.GooglerpcStatus {
	if o == nil {
		return nil
	}
	return o.GooglerpcStatus
}

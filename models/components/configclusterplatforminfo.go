// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"openapi/internal/utils"
)

type ConfigClusterPlatformInfo struct {
	// - K8S: K8S usually when we can not determine kubernetes distribution info
	//  - GKE: GKE when kubernetes is provided by Google, google kubernetes engine
	//  - RANCHER: RANCHER when kubernetes is provided by Rancher
	//  - OPENSHIFT: OPENSHIFT when kubernetes is provided by Redhat's OpenShift Platform
	//  - ROBINIO: ROBINIO when kubernetes is provided by Robin.io
	//  - K3S: K3S when kubernetes is provided by k3s
	//  - EKS: EKS when kubernetes is provided by AWS EKS
	//  - KUBEADM: Kubeadm based installation
	//  - AKS: AKS when kubernetes is provided by Azure kubernetes services
	//  - CKP: CKP when kubernetes is provided by Coredge Kubernetes Platform
	Type    *ClusterPlatformInfoPlatform `default:"K8S" json:"type"`
	Os      *string                      `json:"os,omitempty"`
	Cri     *string                      `json:"cri,omitempty"`
	OsImage *string                      `json:"osImage,omitempty"`
}

func (c ConfigClusterPlatformInfo) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConfigClusterPlatformInfo) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ConfigClusterPlatformInfo) GetType() *ClusterPlatformInfoPlatform {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ConfigClusterPlatformInfo) GetOs() *string {
	if o == nil {
		return nil
	}
	return o.Os
}

func (o *ConfigClusterPlatformInfo) GetCri() *string {
	if o == nil {
		return nil
	}
	return o.Cri
}

func (o *ConfigClusterPlatformInfo) GetOsImage() *string {
	if o == nil {
		return nil
	}
	return o.OsImage
}

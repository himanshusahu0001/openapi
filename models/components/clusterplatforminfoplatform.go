// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// ClusterPlatformInfoPlatform - - K8S: K8S usually when we can not determine kubernetes distribution info
//   - GKE: GKE when kubernetes is provided by Google, google kubernetes engine
//   - RANCHER: RANCHER when kubernetes is provided by Rancher
//   - OPENSHIFT: OPENSHIFT when kubernetes is provided by Redhat's OpenShift Platform
//   - ROBINIO: ROBINIO when kubernetes is provided by Robin.io
//   - K3S: K3S when kubernetes is provided by k3s
//   - EKS: EKS when kubernetes is provided by AWS EKS
//   - KUBEADM: Kubeadm based installation
//   - AKS: AKS when kubernetes is provided by Azure kubernetes services
//   - CKP: CKP when kubernetes is provided by Coredge Kubernetes Platform
type ClusterPlatformInfoPlatform string

const (
	ClusterPlatformInfoPlatformK8S       ClusterPlatformInfoPlatform = "K8S"
	ClusterPlatformInfoPlatformGke       ClusterPlatformInfoPlatform = "GKE"
	ClusterPlatformInfoPlatformRancher   ClusterPlatformInfoPlatform = "RANCHER"
	ClusterPlatformInfoPlatformOpenshift ClusterPlatformInfoPlatform = "OPENSHIFT"
	ClusterPlatformInfoPlatformRobinio   ClusterPlatformInfoPlatform = "ROBINIO"
	ClusterPlatformInfoPlatformK3S       ClusterPlatformInfoPlatform = "K3S"
	ClusterPlatformInfoPlatformEks       ClusterPlatformInfoPlatform = "EKS"
	ClusterPlatformInfoPlatformKubeadm   ClusterPlatformInfoPlatform = "KUBEADM"
	ClusterPlatformInfoPlatformAks       ClusterPlatformInfoPlatform = "AKS"
	ClusterPlatformInfoPlatformCkp       ClusterPlatformInfoPlatform = "CKP"
)

func (e ClusterPlatformInfoPlatform) ToPointer() *ClusterPlatformInfoPlatform {
	return &e
}

func (e *ClusterPlatformInfoPlatform) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "K8S":
		fallthrough
	case "GKE":
		fallthrough
	case "RANCHER":
		fallthrough
	case "OPENSHIFT":
		fallthrough
	case "ROBINIO":
		fallthrough
	case "K3S":
		fallthrough
	case "EKS":
		fallthrough
	case "KUBEADM":
		fallthrough
	case "AKS":
		fallthrough
	case "CKP":
		*e = ClusterPlatformInfoPlatform(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ClusterPlatformInfoPlatform: %v", v)
	}
}
